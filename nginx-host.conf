server {
    listen 80;
    server_name _;
    
    root /usr/share/nginx/html;
    index index.html index.htm;

    # 前端静态文件
    location / {
        try_files $uri $uri/ /index.html;
    }

    # API 请求（包括 SSE）代理到本地3000端口
    location /api/ {
        proxy_pass http://localhost:3000/api/;
        proxy_http_version 1.1;

        # --- Headers for general proxying ---
        proxy_set_header Host $host;
        # Clear Upgrade and Connection headers unless it's WebSocket (handled in /socket.io block)
        proxy_set_header Upgrade '';
        proxy_set_header Connection 'keep-alive'; # Use keep-alive for HTTP/1.1
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;

        # --- Headers and settings specific for SSE --- 
        proxy_set_header Accept 'text/event-stream';
        proxy_set_header Cache-Control 'no-cache'; # Prevent caching of the stream
        proxy_buffering off; # Disable buffering for SSE
        proxy_read_timeout 86400s; # Keep connection open for a long time (e.g., 24 hours)
        proxy_send_timeout 300s;

        # --- CORS Headers (keep these as they handle general API and potentially SSE CORS) ---
        add_header 'Access-Control-Allow-Origin' '*' always; # Replace * with specific origin in production
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        
        # --- OPTIONS Preflight Handling --- 
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*' always; # Replace * with specific origin in production
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    # Socket.IO 连接代理
    location /socket.io/ {
        proxy_pass http://localhost:3000/socket.io/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        
        # 添加 CORS 头 (允许所有来源，生产环境建议指定具体来源)
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Origin,Content-Type,Accept,X-Requested-With,Authorization' always;

        # 处理 OPTIONS 预检请求
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Origin,Content-Type,Accept,X-Requested-With,Authorization' always;
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Length' 0;
            return 204;
         }
    }
} 